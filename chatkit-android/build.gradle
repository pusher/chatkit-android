plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'de.mannodermaus.android-junit5'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
}

apply plugin: 'org.jetbrains.dokka'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    testOptions {
        junitPlatform {
            details 'tree'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    if (rootProject.properties.containsKey('pusher_platform_local')) {
        api project(':pusher-platform-android')
    } else {
        api "com.pusher:pusher-platform-android:$pusher_platform_version"
    }
    api project(':chatkit-core')

    testImplementation "junit:junit:$junit_legacy_version"
    testImplementation junit5.unitTests()
    testCompileOnly junit5.unitTestsRuntime()
    testImplementation junit5.parameterized()
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation 'com.google.truth:truth:0.40'

    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.pusher:push-notifications-android:1.6.2'
}

bintray {
    user = bintray_user
    key = bintray_api_key
    publish = true
    override = true
    publications = ['Release']
    pkg {
        repo = 'maven'
        name = "$POM_ARTIFACT_ID"
        userOrg = "$POM_DEVELOPER_ID"
        licenses = ["$POM_LICENCE_NAME"]
        vcsUrl = "$POM_SCM_URL"
        version {
            name = "$VERSION_NAME"
            desc = "$POM_DESCRIPTION"
            released = new Date()
            vcsTag = "$VERSION_NAME"
            gpg {
                sign = true
                passphrase = System.getenv('SONATYPE_GPG_PASSPHRASE')
            }
        }
    }
}

bintrayUpload.dependsOn(['checkIfPusherPlatformLocalIsSet', 'verifyBintrayCredentials'])

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

def pomConfig = {
    licenses {
        license {
            name 'MIT'
            url "$POM_LICENCE_URL"
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'hamchapman'
            name 'Hamilton Chapman'
            email 'hamilton@pusher.com'
        }
    }

    scm {
        url "$POM_SCM_URL"
    }
}

publishing {
    publications {
        Release(MavenPublication) {
            artifact("$buildDir/outputs/aar/chatkit-android-release.aar")
            artifact sourcesJar
            artifact javadocJar
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    if(it.name == "chatkit-core") {
                        dependencyNode.appendNode('groupId', GROUP)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', VERSION_NAME)
                    } else {
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                def root = asNode()
                root.appendNode('description', "$POM_DESCRIPTION")
                root.appendNode('name', "$POM_NAME")
                root.appendNode('url', "$POM_URL")
                root.children().last() + pomConfig
            }
        }
    }
}
