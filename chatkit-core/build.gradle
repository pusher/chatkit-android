plugins {
    id 'kotlin'
    id 'java-library'
    id 'org.junit.platform.gradle.plugin'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
}

apply plugin: 'org.jetbrains.dokka'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    api 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    if (rootProject.properties.containsKey('pusher_platform_local')) {
        api project(':pusher-platform-core')
    } else {
        api "com.pusher:pusher-platform-core:$pusher_platform_version"
    }

    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation 'com.google.truth:truth:0.40'
    testImplementation 'org.jetbrains.spek:spek-api:1.1.5'
    testImplementation 'org.jetbrains.spek:spek-junit-platform-engine:1.1.5'
    testImplementation 'org.junit.platform:junit-platform-runner:1.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.3'
    testImplementation "com.auth0:java-jwt:3.3.0"

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.0.3'
}

test {
    useJUnitPlatform()
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

sourceSets.test {
    java.srcDirs = ['src/test/kotlin', 'src/integrationTest/kotlin']
    resources.srcDirs = ['src/test/resources', 'src/integrationTest/resources']
}

junitPlatform {
    details 'tree'
    filters {
        engines {
            include 'junit-jupiter', 'spek'
        }
    }
}

afterEvaluate {
    // adds properties for tests
    def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
    junitPlatformTestTask.systemProperties += rootProject.properties.findAll { it.value instanceof String }
    junitPlatformTestTask.systemProperties += System.env
}

bintray {
    user = bintray_user
    key = bintray_api_key
    publish = true
    override = true
    publications = ['Release']
    pkg {
        repo = 'maven'
        name = "$POM_ARTIFACT_ID"
        userOrg = "$POM_DEVELOPER_ID"
        licenses = ["$POM_LICENCE_NAME"]
        vcsUrl = "$POM_SCM_URL"
        version {
            name = "$VERSION_NAME"
            desc = "$POM_DESCRIPTION"
            released  = new Date()
            vcsTag = "$VERSION_NAME"
            gpg {
                sign = true
                passphrase = System.getenv('SONATYPE_GPG_PASSPHRASE')
            }
        }
    }
}

bintrayUpload.dependsOn(['checkIfPusherPlatformLocalIsSet', 'verifyBintrayCredentials'])

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

dokka {
    outputFormat = 'html'
    outputDirectory = "../docs"
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

def pomConfig = {
    licenses {
        license {
            name 'MIT'
            url "$POM_LICENCE_URL"
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'hamchapman'
            name 'Hamilton Chapman'
            email 'hamilton@pusher.com'
        }
    }

    scm {
        url "$POM_SCM_URL"
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        Release(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId "$POM_ARTIFACT_ID"
            groupId "$GROUP"
            version "$VERSION_NAME"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', "$POM_DESCRIPTION")
                root.appendNode('name', "$POM_NAME")
                root.appendNode('url', "$POM_URL")
                root.children().last() + pomConfig
            }
        }
    }
}