// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply plugin: 'maven-publish'

buildscript {
    ext {
        kotlin_version = '1.3.61'
        coroutines_version = '0.22.1'
        android_gradle_version = '3.5.3'
        android_support_version = '27.1.1'
        android_arch_version = '1.1.1'
        spek_version = '2.0.9'
        legacy_spek_version = '1.1.5'
        mockito_version = '3.2.4'
        constraints_layout_version = '1.1.0'
        espresso_version = '3.0.1'
        espresso_runner_version = '1.0.1'
        junit_legacy_version = '4.12'
        pusher_platform_version = '1.0.5'
        dokka_version = '0.9.17'

        bintray_user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        bintray_api_key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    }
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$android_gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath 'de.mannodermaus.gradle.plugins:android-junit5:1.5.2.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

allprojects {
    repositories {
        mavenLocal()
        google()
        jcenter()
        mavenCentral()
    }

    task verifyBintrayCredentials {
        doFirst {
            def out = []
            if (bintray_user == null) out += "Missing `bintrayUser` property or BINTRAY_USER env var"
            if (bintray_api_key == null) out += "Missing `bintrayApiKey` property or BINTRAY_API_KEY env var"
            if (!out.isEmpty()) throw new IllegalStateException("\n" + out.join("\n"))
        }
    }

    task checkIfPusherPlatformLocalIsSet {
        doFirst {
            if (rootProject.properties.containsKey('pusher_platform_local')) {
                throw new Exception("Please unset `pusher_platform_local` in the global gradle.properties file")
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

static def tasksFor(project, tasks) {
    tasks.collect { ":$project:$it".toString() }
}

task ciBuild(type: GradleBuild) {
    tasks = tasksFor('chatkit-core', ['assemble', 'test']) +
            tasksFor('chatkit-android', ['assembleDebug', 'junitPlatformTestDebug', 'lintDebug'])
}
